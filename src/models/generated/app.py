# generated by datamodel-codegen:
#   filename:  schema-app.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class UserConfigPartStamp(BaseModel):
    """
    Options for 'stamp' section of user config.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    file: str = 'stamp.tex'
    overwrite: bool = False
    options: Optional[Dict[str, Any]] = None


class UserConfigPartParameters(BaseModel):
    """
    Options for 'parameters' section of user config.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    file: str = Field('parameters', pattern='^[^\\.\\s]*(\\.[^\\.\\s]*)+')
    overwrite: bool = True
    options: Optional[Dict[str, Any]] = None


class UserProjectTree(BaseModel):
    """
    Recursive structure of user project tree part of user config.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    files: List[str] = []
    folders: Dict[str, UserProjectTree] = {}


class TranspileBlockParameters(BaseModel):
    """
    Data structure for use in parsing blocks of text in phpytex files.
    """

    model_config = ConfigDict(
        extra='forbid',
        populate_by_name=True,
    )
    mode: str = ''
    scope: str = ''
    anon: bool = False
    hide: bool = False
    var_name: str = Field('', alias='var-name')
    code_value: str = Field('', alias='code-value')
    keep: bool = True
    level: int = 0
    path: str = ''
    tab: str = ''
    bib_mode: str = Field('basic', alias='bib-mode')
    bib_options: str = Field('', alias='bib-options')


class EnumProgrammeMode(str, Enum):
    """
    Choice of programme mode
    """

    VERSION = 'version'
    RUN = 'run'


class EnumFeatures(str, Enum):
    """
    Choice of feature to run
    """

    TRANSPILE = 'TRANSPILE'
    UNKNOWN = 'UNKNOWN'


class EnumFilesManagementSystem(RootModel[Literal['OS']]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Literal['OS'] = Field(..., description='Choice of location of task')


class EnumCommentsOptions(str, Enum):
    """
    Mode for handling comments in transpilation process.
    """

    ON = 'on'
    OFF = 'off'
    AUTO = 'auto'


class UserConfigPartCompileOptions(BaseModel):
    """
    Options for compile section of user config.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    root: str = Field(
        'root.tex',
        description='Filename of start of transpilation\n  (phpytex) -> py -> tex -> pdf',
        pattern='^[^\\/\\\\]+\\.tex',
    )
    transpiled: str = Field(
        'phpytex_transpiled.py',
        description='Filename of intermediate transpilation result\n  phpytex -> (py) -> tex -> pdf',
        pattern='^[^\\/\\\\]+\\.py',
    )
    output: str = Field(
        'main.tex',
        description='Filename of end of transpilation result\n  phpytex -> py -> (tex) -> pdf',
        pattern='^[^\\/\\\\]+\\.tex',
    )
    debug: bool = False
    compile_latex: bool = Field(False, alias='compile-latex')
    insert_bib: bool = Field(False, alias='insert-bib')
    backend_bib: str = Field('bibtex', alias='backend-bib')
    comments: EnumCommentsOptions = EnumCommentsOptions.AUTO
    censor_symbol: str = Field('########', alias='censor-symbol', pattern='^.*\\S{3}.*$')
    show_structure: bool = Field(False, alias='show-structure')
    max_length: int = Field(10000, alias='max-length')
    tabs: bool = False
    spaces: int = Field(4, ge=1)
    offset: str = ''
    align: bool = True
    seed: Optional[int] = None
    legacy: bool = False


class UserConfigPartCompile(BaseModel):
    """
    Options for 'compile' section of user config.
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    options: UserConfigPartCompileOptions


class UserConfig(BaseModel):
    """
    Structure of user phpytex.yaml config
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    ignore: bool = False
    compile: UserConfigPartCompile
    stamp: Optional[UserConfigPartStamp] = None
    parameters: Optional[UserConfigPartParameters] = None
    files: List[str] = []
    folders: Dict[str, UserProjectTree] = {}


UserProjectTree.model_rebuild()
